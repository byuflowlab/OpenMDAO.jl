name: Tests

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
    tags: '*'

jobs:
  julia:
    name: Julia ${{ matrix.julia-version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        julia-version:
          - '1' # Leave this line unchanged. '1' will automatically expand to the latest stable 1.x release of Julia.
        os:
          - ubuntu-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.julia-version }}
          arch: ${{ matrix.arch }}
      - name: Add General Registry
        shell: julia --color=yes {0}
        run: |
          using Pkg
          Pkg.Registry.add(RegistrySpec(url="https://github.com/JuliaRegistries/General"))
        env:
              JULIA_PKG_USE_CLI_GIT: 'true'
      - name: OpenMDAOCore.jl Tests
        shell: julia --color=yes {0}
        run: |
          using Pkg
          Pkg.activate("./julia/OpenMDAOCore.jl")
          Pkg.update()
          Pkg.test()
        env:
              JULIA_PKG_USE_CLI_GIT: 'true'
      - name: OpenMDAO.jl Tests
        shell: julia --color=yes {0}
        run: |
          using Pkg
          Pkg.activate("./julia/OpenMDAO.jl")
          Pkg.develop(path="./julia/OpenMDAOCore.jl")
          Pkg.instantiate()
          using CondaPkg
          CondaPkg.add_pip("omjlcomps"; version="@./../../python")
          Pkg.update()
          Pkg.test()
        env:
              JULIA_PKG_USE_CLI_GIT: 'true'

  python:
    name: Python ${{ matrix.python-version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        julia-version:
          - '1' # Leave this line unchanged. '1' will automatically expand to the latest stable 1.x release of Julia.
        os:
          - ubuntu-latest
        arch:
          - x64
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.julia-version }}
          arch: ${{ matrix.arch }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Add General Registry
        shell: julia --color=yes {0}
        run: |
          using Pkg
          Pkg.Registry.add(RegistrySpec(url="https://github.com/JuliaRegistries/General"))
        env:
              JULIA_PKG_USE_CLI_GIT: 'true'
      - name: omjlcomps install
        run: |
          echo "PWD = $PWD"
          python -m pip install --upgrade pip
          pip install -e ./python[test]
          python -c "import juliapkg; juliapkg.resolve()"
        env:
              JULIA_PKG_USE_CLI_GIT: 'true'
      - name: omjlcomps tests
        run: |
          cd ./python/omjlcomps/test
          python test_julia_explicit_comp.py
          python test_julia_implicit_comp.py
          python test_aviary_support.py
          python test_explicit_ad_shape_by_conn.py
        env:
              JULIA_PKG_USE_CLI_GIT: 'true'
